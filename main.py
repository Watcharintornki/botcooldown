import os
import discord
from discord.ext import commands, tasks
import datetime
import asyncio
from flask import Flask
import threading

# ====== Flask Keep-Alive ======
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Discord bot with cooldown is running!"

def run_flask():
    port = int(os.environ.get("PORT", 8080))
    app.run(host='0.0.0.0', port=port)

# ====== Discord Bot Setup ======
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix='!', intents=intents)

DEFAULT_MINUTES = 15
active_tasks = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cooldown ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@bot.event
async def on_ready():
    print(f'‚úÖ ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß: {bot.user}')

async def countdown(ctx, name, minutes):
    message = await ctx.send(f"üïí `{name}` ‡∏à‡∏∞‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ...")

    for i in range(minutes, 0, -1):
        await asyncio.sleep(60)
        try:
            await message.edit(content=f"üïí `{name}` ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ {i - 1} ‡∏ô‡∏≤‡∏ó‡∏µ...")
        except discord.NotFound:
            break  # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß

    await ctx.send(f"‚úÖ `{name}` ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

    # ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    user_id = ctx.author.id
    if user_id in active_tasks and name in active_tasks[user_id]:
        del active_tasks[user_id][name]
        if not active_tasks[user_id]:
            del active_tasks[user_id]

@bot.command()
async def c(ctx, *, arg):
    try:
        parts = arg.strip().split()

        if not parts:
            await ctx.send("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô `!‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡πÇ‡∏£‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô` ‡∏´‡∏£‡∏∑‡∏≠ `!‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡πÇ‡∏£‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô 10`")
            return

        if parts[-1].isdigit():
            minutes = int(parts[-1])
            name = " ".join(parts[:-1])
        else:
            minutes = DEFAULT_MINUTES
            name = " ".join(parts)

        if not name:
            await ctx.send("‚ùó ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå")
            return

        user_id = ctx.author.id
        if user_id in active_tasks and name in active_tasks[user_id]:
            await ctx.send(f"‚ö†Ô∏è `{name}` ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß")
            return

        if user_id not in active_tasks:
            active_tasks[user_id] = {}

        task = asyncio.create_task(countdown(ctx, name, minutes))
        active_tasks[user_id][name] = task

    except Exception as e:
        await ctx.send(f'‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}')

@bot.command()
async def x(ctx, *, name):
    user_id = ctx.author.id
    if user_id in active_tasks and name in active_tasks[user_id]:
        task = active_tasks[user_id][name]
        task.cancel()
        del active_tasks[user_id][name]
        if not active_tasks[user_id]:
            del active_tasks[user_id]
        await ctx.send(f"‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå `{name}` ‡πÅ‡∏•‡πâ‡∏ß")
    else:
        await ctx.send(f"‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ä‡∏∑‡πà‡∏≠ `{name}` ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")

@bot.command()
async def list(ctx):
    user_id = ctx.author.id
    if user_id in active_tasks and active_tasks[user_id]:
        names = list(active_tasks[user_id].keys())
        await ctx.send(f"üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {', '.join(names)}")
    else:
        await ctx.send("üì≠ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")

# ====== Entry Point ======
async def main():
    threading.Thread(target=run_flask).start()
    await bot.start(os.getenv("TOKEN") or "‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà")

if __name__ == "__main__":
    print("üöÄ Starting bot with keep-alive web server...")
    asyncio.run(main())
